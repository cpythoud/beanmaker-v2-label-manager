// Generated by BeanMaker V2, on September 19, 2022 at 1:17:22 PM COT
// Library Version #1.0-SNAPSHOT-build#20914

package org.beanmaker.labels;

import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.processing.Generated;

import org.beanmaker.v2.runtime.DBUtil;
import org.beanmaker.v2.runtime.DbBeanInitializer;
import org.beanmaker.v2.runtime.DbBeanLanguage;
import org.beanmaker.v2.runtime.DbBeanWithItemOrder;
import org.beanmaker.v2.runtime.ToStringMaker;

import org.beanmaker.v2.util.Strings;

import org.dbbeans.sql.DBQuerySetup;
import org.dbbeans.sql.DBTransaction;
import org.dbbeans.sql.SQLRuntimeException;

import static org.beanmaker.labels.DbBeans.dbAccess;

@Generated(value = "org.beanmaker.v2.codegen.BeanBaseSourceFile", date = "2022-09-19T18:17:22.512589500Z", comments = "DO-NOT-EDIT,1.0-SNAPSHOT-20914")
abstract sealed class LanguageBase implements DbBeanWithItemOrder permits Language {

	private final long id;
	private final String name;
	private final String iso;
	private final long itemOrder;

	LanguageBase(long id) {
		this(id, null);
	}

	LanguageBase(long id, DBTransaction transaction) {
		final String[] name = new String[1];
		final String[] iso = new String[1];
		final long[] itemOrder = new long[1];
		if (transaction == null)
			DbBeanInitializer.initialize(id, LanguageParameters.INSTANCE, dbAccess, rs -> {
			name[0] = DBUtil.getString(rs, 2);
			iso[0] = DBUtil.getString(rs, 3);
			itemOrder[0] = DBUtil.getItemOrder(rs, 4);
		});
		else
			DbBeanInitializer.initialize(id, LanguageParameters.INSTANCE, transaction, rs -> {
					name[0] = DBUtil.getString(rs, 2);
					iso[0] = DBUtil.getString(rs, 3);
					itemOrder[0] = DBUtil.getItemOrder(rs, 4);
				});
		this.id = id;
		this.name = name[0];
		this.iso = iso[0];
		this.itemOrder = itemOrder[0];
	}

	LanguageBase(long id, String name, String iso, long itemOrder) {
		this.id = id;
		this.name = name;
		this.iso = iso;
		this.itemOrder = itemOrder;
	}

	LanguageBase(ResultSet rs) {
		this(DBUtil.getBeanID(rs, 1), DBUtil.getString(rs, 2), DBUtil.getString(rs, 3), DBUtil.getItemOrder(rs, 4));
	}

	public Language refreshFromDataBase() {
		return new Language(id);
	}

	@Override
	public boolean equals(Object object) {
		if (object instanceof Language)
			return ((Language) object).getId() == id;

		return false;
	}

	@Override
	public int hashCode() {
		return Long.hashCode(id);
	}

	@Override
	public String toString() {
		ToStringMaker stringMaker = new ToStringMaker(this);
		stringMaker.addField("name", name);
		stringMaker.addField("iso", iso);
		stringMaker.addField("itemOrder", itemOrder);
		return stringMaker.toString();
	}

	@Override
	public long getId() {
		return id;
	}

	public String getName() {
		return name;
	}

	public String getIso() {
		return iso;
	}

	@Override
	public long getItemOrder() {
		return itemOrder;
	}

	@Override
	public boolean isFirstInItemOrder() {
		return LanguageParameters.INSTANCE.getItemOrderManager().isFirstInItemOrder(this);
	}

	@Override
	public boolean isLastInItemOrder() {
		return LanguageParameters.INSTANCE.getItemOrderManager().isLastInItemOrder(this, dbAccess);
	}

	public boolean isNameEmpty() {
		return Strings.isEmpty(name);
	}

	public boolean isIsoEmpty() {
		return Strings.isEmpty(iso);
	}

	@Override
	public String getNameForIdNamePairsAndTitles(DbBeanLanguage language) {
		return DBUtil.getHumanReadableTitle(LanguageParameters.INSTANCE, id, dbAccess);
	}

	public static List<Language> getAll() {
		return getAll(LanguageParameters.INSTANCE.getOrderByFields());
	}

	static List<Language> getAll(String orderBy) {
		return getSelection(null, orderBy, null);
	}

	static List<Language> getSelection(String whereClause) {
		return getSelection(whereClause, null);
	}

	static List<Language> getSelection(String whereClause, DBQuerySetup setup) {
		return getSelection(whereClause, LanguageParameters.INSTANCE.getOrderByFields(), setup);
	}

	static List<Language> getSelection(String whereClause, String orderBy, DBQuerySetup setup) {
		return DBUtil.getSelection(LanguageParameters.INSTANCE, whereClause, orderBy, setup, Language::getList, dbAccess);
	}

	static long getSelectionCount(String whereClause) {
		return getSelectionCount(whereClause, null);
	}

	static long getSelectionCount(String whereClause, DBQuerySetup setup) {
		return DBUtil.getSelectionCount(LanguageParameters.INSTANCE, whereClause, setup, dbAccess);
	}

	public static long getCount() {
		return DBUtil.getFullCount(LanguageParameters.INSTANCE, dbAccess);
	}

	public static boolean isIdOK(long id) {
		return DBUtil.isIdOK(LanguageParameters.INSTANCE, id, dbAccess);
	}

	public static boolean isIdOK(long id, DBTransaction transaction) {
		return DBUtil.isIdOK(LanguageParameters.INSTANCE, id, transaction);
	}

	public static List<Language> getList(ResultSet rs) {
		List<Language> list = new ArrayList<>();

		try {
			while (rs.next())
				list.add(new Language(rs));
		} catch (SQLException sqlex) {
			throw new SQLRuntimeException(sqlex);
		}

		return list;
	}

}
