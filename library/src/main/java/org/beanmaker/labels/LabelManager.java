// Generated by BeanMaker V2, on September 19, 2022 at 1:17:22 PM COT
// Library Version #1.0-SNAPSHOT-build#20914

package org.beanmaker.labels;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import javax.annotation.processing.Generated;

import org.beanmaker.v2.runtime.DbBeanLabel;
import org.beanmaker.v2.runtime.DbBeanLabelBasicFunctions;
import org.beanmaker.v2.runtime.DbBeanLabelEditor;
import org.beanmaker.v2.runtime.DbBeanLanguage;
import org.beanmaker.v2.runtime.MissingImplementationException;

import org.dbbeans.sql.DBTransaction;

@Generated(value = "org.beanmaker.v2.codegen.LabelManagerSourceFile", date = "2022-09-19T18:17:22.503589600Z", comments = "EDITABLE,1.0-SNAPSHOT-20914")
public class LabelManager {

	private static final Map<String, String> DEFAULT_LABELS;

	static {
		DEFAULT_LABELS = new HashMap<>();

		DEFAULT_LABELS.put("org-beanmaker-labels-Label_name", "Code");
		DEFAULT_LABELS.put("org-beanmaker-labels-Label_name_required", "Field is required");
		DEFAULT_LABELS.put("org-beanmaker-labels-Label_name_not_unique", "Code already exists");
		DEFAULT_LABELS.put("org-beanmaker-labels-Label_cct_remove_filtering", "Remove filtering");
		DEFAULT_LABELS.put("org-beanmaker-labels-Label_tooltip_delete", "Delete label");
	}

	public static DbBeanLabel get(long id) {
		throw new MissingImplementationException("LabelManager.get(long)");
	}

	public static DbBeanLabelEditor getEditor(long id) {
		throw new MissingImplementationException("LabelManager.getEditor(long)");
	}

	public static DbBeanLabel get(String name) {
		throw new MissingImplementationException("LabelManager.get(String)");
	}

	public static boolean isIdOK(long id) {
		throw new MissingImplementationException("LabelManager.isIdOK(long)");
	}

	public static boolean isIdOK(long id, DBTransaction transaction) {
		throw new MissingImplementationException("LabelManager.isIdOK(long, DBTransaction)");
	}

	public static boolean isNameOK(String name) {
		return Configuration.getCurrentConfiguration().getLabelHelper().isNameOK(DbBeans.dbAccess, name);
	}

	public static boolean isNameOK(String name, DBTransaction transaction) {
		throw new MissingImplementationException("LabelManager.isNameOK(String, DBTransaction)");
	}

	public static String get(long id, DbBeanLanguage dbBeanLanguage) {
		throw new MissingImplementationException("LabelManager.get(long, DbBeanLanguage)");
	}

	public static String get(long id, DbBeanLanguage dbBeanLanguage, Object... parameters) {
		throw new MissingImplementationException("LabelManager.get(long, DbBeanLanguage, Object...)");
	}

	public static String get(long id, DbBeanLanguage dbBeanLanguage, List<Object> parameters) {
		throw new MissingImplementationException("LabelManager.get(long, DbBeanLanguage, List<Object>)");
	}

	public static String get(long id, DbBeanLanguage dbBeanLanguage, Map<String, Object> parameters) {
		throw new MissingImplementationException("LabelManager.get(long, DbBeanLanguage, Map<String, Object>)");
	}

	public static String get(String name, DbBeanLanguage dbBeanLanguage) {
		throw new MissingImplementationException("LabelManager.get(String, DbBeanLanguage)");
	}

	public static String get(String name, DbBeanLanguage dbBeanLanguage, Object... parameters) {
		throw new MissingImplementationException("LabelManager.get(String, DbBeanLanguage, Object...)");
	}

	public static String get(String name, DbBeanLanguage dbBeanLanguage, List<Object> parameters) {
		throw new MissingImplementationException("LabelManager.get(String, DbBeanLanguage, List<Object>)");
	}

	public static String get(String name, DbBeanLanguage dbBeanLanguage, Map<String, Object> parameters) {
		throw new MissingImplementationException("LabelManager.get(String, DbBeanLanguage, Map<String, Object>)");
	}

	public static DbBeanLabelEditor createEditorInstance() {
		throw new MissingImplementationException("LabelManager.createEditorInstance()");
	}

	public static DbBeanLabel duplicate(DbBeanLabel dbBeanLabel) {
		throw new MissingImplementationException("LabelManager.duplicate(DbBeanLabel)");
	}

	public static DbBeanLanguage getDefaultLanguage() {
		return new Language(Configuration.getCurrentConfiguration().getDefaultLanguageID());
	}

	public static List<DbBeanLanguage> getAllActiveLanguages() {
		throw new MissingImplementationException("LabelManager.getAllActiveLanguages()");
	}

	public static DbBeanLanguage getLanguage(long id) {
		throw new MissingImplementationException("LabelManager.getLanguage(long)");
	}

	public static DbBeanLabelEditor replaceData(DbBeanLabelEditor into, DbBeanLabel from) {
		into.clearCache();
		for (DbBeanLanguage dbBeanLanguage: getAllActiveLanguages())
			if (from.hasDataFor(dbBeanLanguage))
				into.updateLater(dbBeanLanguage, from.get(dbBeanLanguage));

		return into;
	}

	public static Optional<DbBeanLabel> getPossibleLabel(long id) {
		if (isIdOK(id))
			return Optional.of(get(id));

		return Optional.empty();
	}

	public static Optional<DbBeanLabel> getPossibleLabel(String name) {
		if (isNameOK(name))
			return Optional.of(get(name));

		return Optional.empty();
	}

	private static final DbBeanLabelBasicFunctions basicFunctions = new DbBeanLabelBasicFunctions() {
		@Override
		public Optional<DbBeanLabel> getPossibleLabel(String name) {
			return LabelManager.getPossibleLabel(name);
		}

		@Override
		public boolean isNameOK(String name) {
			return LabelManager.isNameOK(name);
		}

		@Override
		public DbBeanLanguage getDefaultLanguage() {
			return LabelManager.getDefaultLanguage();
		}

		@Override
		public String get(String prefix, String labelName, DbBeanLanguage language) {
			String code = prefix + "_" + labelName;
			if (DEFAULT_LABELS.containsKey(code))
				return DEFAULT_LABELS.get(code);

			return super.get(prefix, labelName, language);
		}

	};

	public static DbBeanLabelBasicFunctions getBasicFunctions() {
		return basicFunctions;
	}

}
