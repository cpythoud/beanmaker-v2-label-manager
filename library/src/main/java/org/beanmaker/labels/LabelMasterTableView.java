// Generated by BeanMaker V2, on September 19, 2022 at 1:23:32 PM COT
// Library Version #1.0-SNAPSHOT-build#20914

package org.beanmaker.labels;

import org.beanmaker.v2.runtime.DbBeanInterface;
import org.beanmaker.v2.runtime.MasterTableCellDefinition;

import org.beanmaker.v2.util.Strings;

import org.jcodegen.html.ATag;
import org.jcodegen.html.CData;
import org.jcodegen.html.SpanTag;
import org.jcodegen.html.Tag;
import org.jcodegen.html.TdTag;
import org.jcodegen.html.ThTag;
import org.jcodegen.html.TrTag;

import javax.annotation.processing.Generated;

import java.util.List;

@Generated(value = "org.beanmaker.v2.codegen.BeanMasterTableViewSourceFile", date = "2022-09-19T18:23:32.417719200Z", comments = "EDITABLE,1.0-SNAPSHOT-20914")
public final class LabelMasterTableView extends LabelMasterTableViewBase {

    private final Configuration configuration;

    public LabelMasterTableView() {
        displayId = true;
        showEditLinks = true;
        configuration = Configuration.getCurrentConfiguration();
        tableId = "labels";
    }

    @Override
    protected TrTag getFilterRow() {
        TrTag filterRow = getDefaultStartOfFilterRow();

        filterRow.child(getIdFilterCell());
        filterRow.child(getNameFilterCell());

        for (var language: Language.getAll())
            filterRow.child(getStringFilterCell(language.getIso()));

        return filterRow;
    }

    @Override
    protected TrTag getTitleRow() {
        TrTag titleRow = getDefaultStartOfTitleRow();

        titleRow.child(getIdTitleCell());
        titleRow.child(getNameTitleCell());

        for (var language: Language.getAll())
            titleRow.child(getTitleCell(language.getIso(), language.getCapIso()));

        return titleRow;
    }

    @Override
    ThTag getIdTitleCell() {
        if (configuration.usePlatformLabels())
            return super.getIdTitleCell();

        return getTitleCell("id", "ID");
    }

    ThTag getNameTitleCell() {
        if (configuration.usePlatformLabels())
            return super.getNameTitleCell();

        return getTitleCell("name", "Code");
    }

    @Override
    List<Label> getLabelInventory() {
        return Label.getNonAutomaticLabels();
    }

    @Override
    protected long getLineCount() {
        return Label.getNonAutomaticLabelCount();
    }

    @Override
    protected <B extends DbBeanInterface> void addDataToLine(TrTag line, B label) {
        var actualLabel = (Label) label;
        FormattedLabelData labelData = new FormattedLabelData(actualLabel, dbBeanLocalization);
        line.child(getNameTableCell(actualLabel));

        for (var language: Language.getAll())
            line.child(getLabelDataTableCell(actualLabel, language));
    }

    @Override
    protected TdTag getEditCell(DbBeanInterface bean) {
        return getDeleteCell(bean);
    }

    @Override
    protected TdTag getIdTableCell(DbBeanInterface bean) {
        return super.getIdTableCell(bean).appendCssClasses(PADDING_CSS_CLASS);
    }

    private TdTag getNameTableCell(Label label) {
        String filterAndOrder = label.getName();
        var definition = new MasterTableCellDefinition("name", getLabelNameLink(label));
        definition.filteringValue(filterAndOrder).orderingValue(filterAndOrder).extraCssClasses(PADDING_CSS_CLASS);

        return getTableCell(definition);
    }

    private Tag getLabelNameLink(Label label) {
        return new ATag()
                .href("#")
                .data("label", Long.toString(label.getId()))
                .data("value", label.getName())
                .cssClass("edit-label-name hover:bg-stone-400")
                .child(new CData(label.getName()));
    }

    private TdTag getLabelDataTableCell(Label label, Language language) {
        String filterAndOrder = label.hasDataFor(language) ? label.get(language) : "";
        var definition = new MasterTableCellDefinition(language.getIso(), getLabelLink(label, language, filterAndOrder));
        definition.filteringValue(filterAndOrder).orderingValue(filterAndOrder).extraCssClasses(PADDING_CSS_CLASS);

        return getTableCell(definition);
    }

    private Tag getLabelLink(Label label, Language language, String value) {
        var link = new ATag()
                .href("#")
                .data("label", Long.toString(label.getId()))
                .data("language", Long.toString(language.getId()))
                .data("value", value)
                .cssClass("edit-label-data hover:bg-stone-400");

        if (Strings.isEmpty(value))
            link.child(HeroIcons.get("pencil", "w-5 h-5"));
        else
            link.child(new CData(label.get(language)));

        return link;
    }

    @Override
    protected TdTag getDeleteCell(DbBeanInterface bean) {
        return new TdTag()
                .cssClass(tdResetCssClass)
                .child(new ATag()
                        .id("labelDel_" + bean.getId())
                        .cssClass("tb-operation delete_label cursor-pointer")
                        .child(
                                new SpanTag()
                                        .child(HeroIcons.get("trash", "w-5 h-5"))
                                        .title(dbBeanLocalization.getLabel("tooltip_delete"))));
    }

    @Override
    protected <B extends DbBeanInterface> boolean okToDelete(B bean) {
        return false;  // * The trashbin will show at the start of the line instead
    }

}
