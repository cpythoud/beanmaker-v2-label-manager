// Generated by BeanMaker V2, on September 19, 2022 at 1:23:32 PM COT
// Library Version #1.0-SNAPSHOT-build#20914

package org.beanmaker.labels;

import java.sql.ResultSet;

import java.util.List;
import java.util.Map;

import javax.annotation.processing.Generated;

import org.beanmaker.v2.runtime.DbBeanLabel;
import org.beanmaker.v2.runtime.DbBeanLanguage;

import org.dbbeans.sql.DBTransaction;

@Generated(value = "org.beanmaker.v2.codegen.BeanSourceFile", date = "2022-09-19T18:23:32.402722300Z", comments = "EDITABLE,1.0-SNAPSHOT-20914")
public final class Label extends LabelBase implements DbBeanLabel {

	private static final String AUTO_LABEL_PREFIX = "XXX-"; // ! Might need to be turned into a Configuration parameter

	public Label(long id) {
		super(id);
	}

	public Label(long id, DBTransaction transaction) {
		super(id, transaction);
	}

	Label(ResultSet rs) {
		super(rs);
	}

	static List<Label> getNonAutomaticLabels() {
		return DbBeans.dbAccess.processQuery(
				"SELECT " + LabelParameters.INSTANCE.getDatabaseFieldList() +
						" FROM " + Configuration.getCurrentConfiguration().getLabelTable() +
						" WHERE `name` NOT LIKE '" + AUTO_LABEL_PREFIX + "%'" +
						" ORDER BY `name`",
				Label::getList
		);
	}

	static long getNonAutomaticLabelCount() {
		return DbBeans.dbAccess.processQuery(
				"SELECT COUNT(id) FROM " + Configuration.getCurrentConfiguration().getLabelTable() +
						" WHERE `name` NOT LIKE '" + AUTO_LABEL_PREFIX + "%'",
				rs -> {
					rs.next();
					return rs.getLong(1);
				}
		);
	}

	@Override
	public String get(DbBeanLanguage dbBeanLanguage) {
		return Configuration.getCurrentConfiguration().getLabelHelper().get(DbBeans.dbAccess, getId(), dbBeanLanguage);
	}

	@Override
	public String get(DbBeanLanguage dbBeanLanguage, Object... parameters) {
		return Configuration.getCurrentConfiguration().getLabelHelper().get(DbBeans.dbAccess, getId(), dbBeanLanguage, parameters);
	}

	@Override
	public String get(DbBeanLanguage dbBeanLanguage, List<Object> parameters) {
		return Configuration.getCurrentConfiguration().getLabelHelper().get(DbBeans.dbAccess, getId(), dbBeanLanguage, parameters);
	}

	@Override
	public String get(DbBeanLanguage dbBeanLanguage, Map<String, Object> parameters) {
		return Configuration.getCurrentConfiguration().getLabelHelper().get(DbBeans.dbAccess, getId(), dbBeanLanguage, parameters);
	}

	@Override
	public boolean hasDataFor(DbBeanLanguage dbBeanLanguage) {
		return Configuration.getCurrentConfiguration().getLabelHelper().hasDataFor(DbBeans.dbAccess, getId(), dbBeanLanguage);
	}

	@Override
	public String getSafeValue(DbBeanLanguage dbBeanLanguage) {
		throw new UnsupportedOperationException();
	}

	@Override
	public String getSafeValue(DbBeanLanguage dbBeanLanguage, Object... parameters) {
		throw new UnsupportedOperationException();
	}

	@Override
	public String getSafeValue(DbBeanLanguage dbBeanLanguage, List<Object> parameters) {
		throw new UnsupportedOperationException();
	}

	@Override
	public String getSafeValue(DbBeanLanguage dbBeanLanguage, Map<String, Object> parameters) {
		throw new UnsupportedOperationException();
	}

}
